Date: 2022/08/01

[print의 다양한 사용 방법]
함수 print에는 변수나 값 여러 개를 ,(콤마)로 구분하여 넣을 수 있다.
>>> print(1, 2, 3)
1 2 3 # 각 값이 공백으로 띄워져서 한 줄로 출력
* 공백이 아닌 다른 문자(sep)
print(a, b, sep='문자 또는 문자열') # a와 b사이를 이어주는
* 출력의 끝(end)
print(a, end='문자 또는 문자열') # 출력의 끝에 붙는(default: '\n')

@ : 행렬 곱셉 연산자(파이썬 3.5이상부터 사용할 수 있으며 numpy 모듈을 설치해야 한다.)
a @ b >>> 행렬 a와 b를 곱함

+a : a에 양수 부호를 붙임
-a : a에 음수 부호를 붙임

보통 가격이나 큰 숫자는 10,000,000처럼 세 자리마다 ,(콤마)로 구분해서 표현한다. 
파이썬에서는 이런 경우에 , 대신 _(밑줄 문자)를 사용한다.
>>> 10_000_000
10000000

[변수에 값이 어떻게 저장될까?]
값 자체도 객체이다. 
그래서 변수에 값을 그대로 저장하지 않고 객체를 가리키는 방식을 사용한다. 
예를 들어서 다음과 같이 x와 y에 1000을 할당했다면 x와 y는 단지 1000이라는 객체를 가리킬 뿐이다.
>>> x = 1000
>>> y = 1000

비교 연산자와 논리 연산자의 판단 결과로 True, False를 사용함.
즉, 비교 결과가 맞으면 True, 아니면 False.

같다는 ==, 다르다는 !=이 이미 있는데 왜 is, is not을 만들었을까? 
is, is not도 같다, 다르다지만
==, !=는 값 자체를 비교하고, is, is not은 객체(object)를 비교한다.

not은 논릿값을 뒤집는다.
>>> not True
False
>>> not False
True

and, or, not 논리 연산자가 식 하나에 들어있으면 not, and, or 순으로 판단함.
Ex) not True and False or not False --> ((not True) and False) or (not False)
논리 연산자와 비교 연산자를 함께 사용시 순서는
1. 비교 연산자 
2. 논리 연산자

[단락 평가(short-circuit evalution)]
- 단락 평가는 첫 번째 값만으로 결과가 확실할 때 두 번째 값은 확인(평가)하지 않는 방법
* 특히 파이썬에서 논리 연산자는 이 단락 평가에 따라 반환하는 값이 결정 *
>>> True and 'Python'
'Python' # 파이썬에서 논리 연산자는 마지막으로 단락 평가를 실시한 값을 그대로 반환