Date. 2023/01/11

[일급 객체(first-class object)]
- 변수나 데이터 구조에 넣을 수 있어야 한다.
- 매개변수에 전달할 수 있어야 한다.
- 반환값으로 사용할 수 있어야 한다.
위 세개의 조건을 만족하는 객체.

[일급 함수(first-class function)]
일급 객체의 조건을 만족하면서 실행 중(run-time)에 함수를 생성할 수 있어야 합니다.
파이썬에서는 def 안에서 def로 함수를 만들거나, lambda를 사용하여 실행 중에 
함수를 생성할 수 있으므로 파이썬의 함수는 일급 함수입니다.


질문, 다른 언어에 있는 switch 문법은 사용할 수 없나요?
파이썬은 switch 문법이 없습니다.
하지만 딕셔너리와 람다 표현식을 사용하면 switch처럼 사용할 수는 있습니다.
switch = {
    '+' : lambda x, y : x + y,
    '*' : lambda x, y : x * y
}
x = '+'
try:
    print(switch[x](10,20))
except keyError:
    print('default')




< 클래스 > 

- 클래스는 객체를 표현하기 위한 문법
- 객체(object) : 특정한 개념이나 모양으로 존재하는 것
프로그래밍으로 객체를 만들 때 사용하는 것이 클래스입니다.
클래스의 데이터(변수, 상수 등)를 속성(attribute), 클래스의 기능(함수)을 메서드(method)

[객체지향(object oriented) 프로그래밍]
객체지향 프로그래밍은 복잡한 문제를 잘게 나누어 객체로 만들고, 객체를 조합해서 문제를 해결하는 것.
따라서 현실 세계의 복잡한 문제를 처리하는데 유용하며 기능을 개선하고 발전시킬 때도 
해당 클래스만 수정하면 되므로 유지 보수에도 효율적입니다.

숫자 1, 2, 3 문자 'a', 'b', 'c', 리스트, 딕셔너리 등을 조합해서 프로그램을 만들었는데 
"사실 파이썬에서는 이 모든 것이 객체이다!"


[클래스와 메서드 만들기]
- class에 클래스 이름을 지정하고 :(콜론)을 붙인 뒤 다음 줄부터 def로 메서드를 작성

    class 클래스이름:
        def 메서드(self):
            코드

- 클래스 이름을 짓는 방법은 변수와 같고, 보통 클래스의 이름은 대문자로 시작함.
- 메서드 작성 방법은 함수와 같고, 코드는 반드시 들여쓰기, 특히 메서드의 첫 번째 매개변수는 반드시 self를 지정!!

[클래스 사용법]

    인스턴스 = 클래스()

- 클래스는 특정 개념을 표현만 할뿐 사용을 하려면 인스턴스를 생성해야한다.

[메서드 호출하기]
- 메서드는 클래스가 아니라 인스턴스를 통해 호출, 인스턴스 뒤에 .(점)을 붙이고 메서드를 호출

    인스턴스.메서드()

- 인스턴스를 통해 호출하는 메서드를 인스턴스 메서드라고 부름.

[파이썬에서 흔히 볼 수 있는 클래스]
지금까지 사용한 int, list, dict 등도 사실은 클래스였다.
이 클래스로 인스턴스를 만들고 메서드를 사용했던 것.
즉, 파이썬에서는 자료형도 클래스이다.
type을 사용하면 객체(인스턴스)가 어떤 클래스인지 확인할 수 있음. 
• type(객체)

[인스턴스와 객체의 차이점]
인스턴스와 객체는 같은 것을 뜻함.
보통 객체만 지칭할 때는 그냥 객체(object)라고 부르고, 클래스와 연관지어서 말할 때는 인스턴스(instance)라고 부름.


[참고| 빈 클래스 만들기]
class 클래스이름:
    pass

[참고 | 메서드 안에서 메서드 호출]
메서드 안에서 메서드를 호출할 때는 다음과 같이 self.메서드() 형식으로 호출해야함.
self 없이 메서드 이름만 사용하면 클래스 바깥쪽에 있는 함수를 호출한다는 뜻이 됨.

[참고 | 특정 클래스의 인스턴스인지 확인하기]
현재 인스턴스가 특정 클래스의 인스턴스인지 확인할 때는 isinstance 함수를 사용.
특정 클래스의 인스턴스가 맞으면 True, 아니면 False를 반환함.
주로 객체의 자료형을 판단할 때 사용.
• isinstance(인스턴스, 클래스)


[속성을 만들고 사용하기]
클래스에 속성(attribute)을 만들 때는 __init__ 메서드 안에서 self.속성에 값을 할당한다.

    class 클래스이름:
        def __init__(self):
            self.속성 = 값

[__init__ 메서드]
minsub = Person() 처럼 클래스에 ( )(괄호)를 붙여서 인스턴스를 만들 때 호출되는 특별한 메서드(생성자 느낌)
즉, __init__(initialize)이라는 이름 그대로 인스턴스(객체)를 초기화한다.
- 스페셜 메서드(special method) 또는 매직 메서드(magic method)
    앞 뒤로 __(밑줄 두 개)가 붙은 메서드는 파이썬이 자동으로 호출해주는 메서드
파이썬의 여러 가지 기능을 사용할 때 이 스페셜 메서드를 채우는 식으로 사용하게 되여어

[self의 의미]
self는 인스턴스 자기 자신을 의미
예를 들면, __init__의 매개변수 self에 들어가는 값은 Person()이라 할 수 있습니다. (class_attribute.py 참조)
그리고 self가 완성된 뒤 minsub에 할당됩니다. 이후 메서드를 호출하면 현재 인스턴스가 자동으로 매개변수 self에 들어옵니다.
그래서 greeting 메서드에서 print(self.hello)처럼 속성을 출력할 수 있었던 것.

[인스턴스를 만들 때 값 받기]
_init__ 메서드에서 self 다음에 값을 받을 매개변수를 지정, 그리고 매개변수를 self.속성에 넣어줍니다.

    class 클래스이름:
        def __init__(self, 매개변수1, 매개변수2):
            self.속성1 = 매개변수1
            self.속성2 = 매개변수2

[속성에 접근]
클래스 바깥에서 속성에 접근할 때는 인스턴스.속성 형식으로 접근.
- 인스턴스 속성 : 인스턴스를 통해 접근하는 속성


[참고 | 클래스의 위치 인수, 키워드 인수]
클래스로 인스턴스를 만들 때 위치 인수와 키워드 인수를 사용할 수 있음. 규칙은 함수와 동일.

[참고 | 인스턴스를 생성한 뒤에 속성 추가하기, 특정 속성만 허용하기]
클래스로 인스턴스를 만든 뒤에도 "인스턴스.속성 = 값" 형식으로 속성을 계속 추가할 수 있습니다.
이렇게 추가한 속성은 해당 인스턴스에만 생성됨.
인스턴스는 생성한 뒤에 속성을 추가할 수 있으므로 __init__ 메서드가 아닌 다른 메서드에서도 속성을 추가할 수 있습니다. 
단, 이때는 메서드를 호출해야 속성이 생성됩니다.
- 특정 속성만 허용하고 다른 속성은 제한하는 법
    클래스에서 __slots__에 허용할 속성 이름을 리스트로 넣어주면 됩니다. 특히 속성 이름은 반드시 문자열로 지정해줍니다.
    • __slots__ = ['속성이름1, '속성이름2'] # 속성이름1, 속성이름2만 허용(다른 속성은 생성 제한)


[비공개 속성(private attribute)]
클래스 바깥에서는 접근할 수 없고 클래스 안에서만 사용할 수 있음.
__속성과 같이 이름이 __(밑줄 두 개)로 시작해야함.  __속성__처럼 밑줄 두 개가 양 옆에 왔을 때는 비공개 속성이 아니므로 주의.

    class 클래스이름:
        def __init__(self, 매개변수)
            self.__속성 = 값

비공개 속성은 클래스 바깥으로 드러내고 싶지 않은 값에 사용함.
즉, 중요한 값인데 바깥에서 함부로 바꾸면 안될 때 비공개 속성을 주로 사용.
비공개 속성을 바꾸는 경우는 클래스의 메서드로 한정


[참고 | 공개 속성과 비공개 속성]
- 공개 속성(public attribute) : 클래스 바깥에서 접근할 수 있는 속성
- 비공개 속성(private attribute) : 클래스 안에서만 접근할 수 있는 속성

[참고 | 비공개 메서드 사용하기]
메서드도 이름이 __(밑줄 두 개)로 시작하면 클래스 안에서만 호출할 수 있는 비공개 메서드가 됨.

    class 클래스이름:
        def __메서드(self):
            코드

메서드를 클래스 바깥으로 드러내고 싶지 않을 때 사용. 
보통 내부에서만 호출되어야 하는 메서드를 비공개 메서드로 만듬.