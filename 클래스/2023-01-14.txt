Date. 2023/01/14



상속으로 할 수 있는 예쁜짓👍
https://dojang.io/mod/page/view.php?id=2391



[클래스 상속(inheritance)]
상속은 무언가를 물려받는다는 뜻
그래서 클래스 상속은 물려받은 기능을 유지한채로 다른 기능을 추가할 때 사용하는 기능.
- 기반 클래스(base class) : 기능을 물려주는 클래스 
  • 부모 클래스(parent class), 슈퍼 클래스(superclass)라고도 부름
- 파생 클래스(derived class) : 상속을 받아 새롭게 만드는 클래스
  • 자식 클래스(child class), 서브 클래스(subclass)라고도 부름


왜 이런 상속 개념을 만들었을까? 
만약 새로운 기능이 필요할 때마다 계속 클래스를 만든다면 중복되는 부분을 반복해서 만들어야 합니다. 
이럴 때 상속을 사용하면 중복되는 기능을 만들지 않아도 됩니다. 따라서 상속은 기존 기능을 재사용할 수 있어서 효율적임.

[클래스 상속하는법]
클래스를 만들 때 ( )(괄호)를 붙이고 안에 기반 클래스 이름을 넣습니다.

    class 기반클래스이름:
        코드
    
    class 파생클래스이름(기반클래스이름):
        코드

[참고 | 상속 관계 확인하기]
클래스의 상속 관계를 확인하고 싶을 때는 issubclass 함수를 사용
즉, 클래스가 기반 클래스의 파생 클래스인지 확인합니다. 맞으면 True, 아니면 False
• issubclass(파생클래스, 기반클래스)

>>> class Person:
...     pass
...
>>> class Student(Person):
...     pass
...
>>> issubclass(Student, Person)
True


▶︎ 클래스_상속 폴더 부분
[기반 클래스의 속성 사용]
super()로 기반 클래스 초기화해야 파생클래스에서 사용 가능함.
• super().메서드()

[기반 클래스를 초기화하지 않아도 되는 경우]
파생 클래스에서 __init__ 메서드를 생략한다면 기반 클래스의 __init__이 자동으로 호출되므로 super()는 사용하지 않아도 됩니다.

[참고 | 좀 더 명확하게 super 사용하기]
파생 클래스와 self를 넣어서 현재 클래스가 어떤 클래스인지 명확하게 표시하는 방법도 있습니다.
• super(파생클래스, self).메서드


[메서드 오버라이딩(overriding)]
파생 클래스에서 기반 클래스의 메서드를 새로 정의
오버라이딩(overriding)은 무시하다, 우선하다라는 뜻을 가지고 있는데 
말 그대로 기반 클래스의 메서드를 무시하고 새로운 메서드를 만든다는 뜻

메서드 오버라이딩은 왜 사용할까?
보통 프로그램에서 어떤 기능이 같은 메서드 이름으로 계속 사용되어야 할 때 메서드 오버라이딩을 활용함.
메서드 오버라이딩은 원래 기능을 유지하면서 새로운 기능을 덧붙일 때 사용합니다.


[다중 상속]
여러 기반 클래스로부터 상속을 받아서 파생 클래스를 만드는 방법

    class 기반클래스이름1:
        코드
    
    class 기반클래스이름2:
        코드
    
    class 파생클래스이름(기반클래스이름1, 기반클래스이름2):
        코드


[메서드 탐색 순서 확인]
많은 프로그래밍 언어들이 다이아몬드 상속에 대한 해결책을 제시하고 있는데 
파이썬에서는 메서드 탐색 순서(Method Resolution Order, MRO)를 따릅니다.
메서드 mro를 사용해보면 메서드 탐색 순서가 나옵니다(클래스.__mro__ 형식도 같은 내용).
• 클래스.mro()

파이썬은 다중 상속을 한다면 class D(B, C):의 클래스 목록 중 왼쪽에서 오른쪽 순서로 메서드를 찾습니다. 
그러므로 같은 메서드가 있다면 B가 우선합니다. 만약 상속 관계가 복잡하게 얽혀 있다면 MRO를 살펴보는 것이 편리함.


[참고 | object 클래스] # 자바랑 비슷한 개념
파이썬에서 object는 모든 클래스의 조상입니다. 그래서 int의 MRO를 출력해보면 int 자기 자신과 object가 출력됩니다.
>>> int.mro()
[<class 'int'>, <class 'object'>]
파이썬 3에서 모든 클래스는 object 클래스를 상속받으므로 기본적으로 object를 생략합니다.


[추상 클래스(abstract class)]
추상 클래스는 메서드의 목록만 가진 클래스이며 상속받는 클래스에서 "메서드 구현을 강제"하기 위해 사용합니다.
추상 클래스를 만들려면 import로 abc 모듈을 가져와야 합니다( abc는 abstract base class의 약자입니다).
그리고 클래스의 ( )(괄호) 안에 metaclass=ABCMeta를 지정하고, 메서드를 만들 때 위에 @abstractmethod를 붙여서 추상 메서드로 지정합니다.

    from abc import *
    
    class 추상클래스이름(metaclass=ABCMeta):
        @abstractmethod
        def 메서드이름(self):
            코드

추상 클래스를 상속받았다면 @abstractmethod가 붙은 추상 메서드를 모두 구현해야 합니다.
참고로 추상 클래스의 추상 메서드를 모두 구현했는지 확인하는 시점은 파생 클래스가 인스턴스를 만들 때입니다.

[추상 메서드를 빈 메서드로 만드는 이유]
추상 클래스는 인스턴스로 만들 수가 없다.
그래서 지금까지 추상 메서드를 만들 때 pass만 넣어서 빈 메서드로 만든 것
왜냐하면 추상 클래스는 인스턴스를 만들 수 없으니 추상 메서드도 호출할 일이 없기 때문

정리하자면 추상 클래스는 인스턴스로 만들 때는 사용하지 않으며 오로지 상속에만 사용함.
그리고 파생 클래스에서 반드시 구현해야 할 메서드를 정해 줄 때 사용함.