Date. 2023/03/05


asyncio는 내용이 방대하여 책 한권으로도 부족함. 
여기서는 asyncio의 기본적인 사용 방법만 소개한다. 
좀 더 깊이 학습하려면 파이썬 공식 문서와 관련 서적을 참고하기 바랍니다.


asyncio(Asynchronous I/O)는 비동기 프로그래밍을 위한 모듈이며 CPU 작업과 I/O를 병렬로 처리하게 해줍니다.

• 동기(synchronous) 처리는 특정 작업이 끝나면 다음 작업을 처리하는 순차처리 방식
• 비동기(asynchronous) 처리는 여러 작업을 처리하도록 예약한 뒤 작업이 끝나면 결과를 받는 방식


asyncio를 사용하려면 async def로 네이티브 코루틴을 만듭니다
(파이썬에서는 제너레이터 기반의 코루틴과 구분하기 위해 async def로 만든 코루틴은 네이티브 코루틴이라고 합니다)

async def 함수이름(): # version 3.5 이상부터 사용 가능
    코드

네이티브 코루틴을 호출하면 코루틴 객체가 생성됩니다.

• 이벤트루프 = asyncio.get_event_loop()
• 이벤트루프.run_until_complete(코루틴객체 또는 퓨처객체)

run_until_complete는 네이티브 코루틴이 이벤트 루프에서 실행되도록 예약하고, 
해당 네이티브 코루틴이 끝날 때까지 기다립니다. 
이렇게 하면 이벤트 루프를 통해서 hello 코루틴이 실행됩니다. 할 일이 끝났으면 loop.close로 이벤트 루프를 닫아줍니다.


[await로 네이티브 코루틴 실행하는법]
await 뒤에 코루틴 객체, 퓨처 객체, 태스크 객체를 지정하면 해당 객체가 끝날 때까지 기다린 뒤 결과를 반환합니다.
await는 단어 뜻 그대로 특정 객체가 끝날 때까지 기다립니다.
• 변수 = await 코루틴객체
• 변수 = await 퓨처객체
• 변수 = await 태스크객체
주의할 점이 있는데 await는 네이티브 코루틴 안에서만 사용할 수 있습니다.
코루틴 안에서 다른 코루틴을 실행할 때 await를 사용합니다.



[참고 | 퓨처와 태스크]
• 퓨처(asyncio.Future)는 미래에 할 일을 표현하는 클래스인데 할 일을 취소하거나 상태 확인, 완료 및 결과 설정에 사용합니다.
• 태스크(asyncio.Task)는 asyncio.Future의 파생 클래스이며 asyncio.Future의 기능과 실행할 코루틴의 객체를 포함하고 있습니다. 
  태스크는 코루틴의 실행을 취소하거나 상태 확인, 완료 및 결과 설정에 사용합니다. 

[참고 | 파이썬 3.4 이하에서 asyncio 사용하기]
async def와 await는 파이썬 3.5에서 추가되었습니다. 따라서 3.5 미만 버전에서는 사용할 수 없어요
파이썬 3.4에서는 다음과 같이 @asyncio.coroutine 데코레이터로 네이티브 코루틴을 만듭니다.

    import asyncio
    
    @asyncio.coroutine
    def 함수이름():
        코드

파이썬 3.4에서는 await가 아닌 yield from을 사용한다.
파이썬 3.3에서 asyncio는 pip install asyncio로 asyncio를 설치한 뒤 @asyncio.coroutine 데코레이터와 yield from을 사용하면 됩니다. 
단, 3.3 미만 버전에서는 asyncio를 지원하지 않습니다.


[run_in_executor]
함수(메서드)는 결과가 나올 때까지 코드 실행이 중단(block)되는데 이런 함수들을 블로킹 I/O(blocking I/O) 함수라고 부릅니다.
특히 네이티브 코루틴 안에서 블로킹 I/O 함수를 실행하려면 이벤트 루프의 run_in_executor 함수를 사용하여 다른 스레드에서 병렬로 실행시켜야 합니다.

run_in_executor의 첫 번째 인수는 executor인데 함수를 실행시켜줄 스레드 풀 또는 프로세스 풀입니다. 
여기서는 None을 넣어서 기본 스레드 풀을 사용합니다.
그리고 두 번째 인수에는 실행할 함수를 넣고 세 번째 인수부터는 실행할 함수에 들어갈 인수를 차례대로 넣어줍니다.
• 이벤트루프.run_in_executor(None, 함수, 인수1, 인수2, 인수3)



[네이티브 코루틴 동시에 실행]
네이티브 코루틴 여러 개를 동시에 실행할때는 먼저 asyncio.ensure_future 함수를 사용하여 태스크( asyncio.Task) 객체를 생성하고 리스트로 만들어줍니다.
• 태스크객체 = asyncio.ensure_future(코루틴객체 또는 퓨처객체)

그다음에 태스크 리스트를 asyncio.gather 함수에 넣어줍니다. 
asyncio.gather는 모든 코루틴 객체(퓨처, 태스크 객체)가 끝날 때까지 기다린 뒤 결과(반환값)를 리스트로 반환합니다.
• 변수 = await asyncio.gather(코루틴객체1, 코루틴객체2)
asyncio.gather는 리스트가 아닌 위치 인수로 객체를 받으므로 태스크 객체를 리스트로 만들었다면 
asyncio.gather(*futures)와 같이 리스트를 언패킹해서 넣어줍니다. 
또한, asyncio.gather도 코루틴이므로 await로 실행한 뒤 결과를 가져옵니다.



[참고 | run_in_executor에 키워드 인수를 사용하는 함수 넣기]
run_in_executor 같은 함수는 위치 인수만 넣을 수 있는데 파이썬에서는 키워드 인수를 많이 사용합니다.
run_in_executor에 키워드 인수를 사용하는 함수를 넣을 때는 functools.partial을 사용해야 합니다.
functools.partial은 이름 그대로 부분 함수를 만들어주는 기능입니다. functools.partial은 인수가 포함된 부분 함수를 반환한다.
• functools.partial(함수, 위치인수, 키워드인수)


[async with과 async for]
▶︎ async with은 클래스나 함수를 비동기로 처리한 뒤 결과를 반환하는 문법
▶︎ async for는 비동기로 반복하는 문법


[async with] # async with은 파이썬 3.5 이상부터 사용 가능
async with은 with 다음에 클래스의 인스턴스를 지정하고 as 뒤에 결과를 저장할 변수를 지정한다.
async with으로 동작하는 클래스를 만들려면 __aenter__와 __aexit__ 메서드를 구현해야 합니다(asynchronous enter, asynchronous exit라는 뜻).
그리고 메서드를 만들 때는 반드시 async def를 사용합니다.

class 클래스이름:
    async def __aenter__(self):
        코드
 
    async def __aexit__(self, exc_type, exc_value, traceback):
        코드

__aenter__에서 값을 반환하면 as에 지정한 변수에 들어갑니다. 
__aexit__ 메서드는 async with as를 완전히 벗어나면 호출되는데 여기서는 특별히 만들 부분이 없으므로 pass를 넣습니다(메서드 자체가 없으면 에러가 발생합니다).


[async for] # async for는 파이썬 3.5 이상부터 사용 가능
async for로 동작하는 클래스를 만들려면 __aiter__와 __anext__ 메서드를 구현해야 합니다(asynchronous iter, asynchronous next라는 뜻).
그리고 메서드를 만들 때는 반드시 async def를 사용합니다.
메서드가 __anext__, __aiter__라는 점만 다를 뿐 일반적인 이터레이터와 만드는 방법과 같습니다.
반복을 끝낼 때는 StopAsyncIteration 예외를 발생시키면 됩니다.



[참고 | 제너레이터 방식으로 비동기 이터레이터 만들기]
yield를 사용하여 제너레이터 방식으로 비동기 이터레이터를 만들 수도 있습니다.
async def로 네이티브 코루틴을 만들고 yield를 사용하여 값을 바깥으로 전달하면 됩니다.

[참고 | 비동기 표현식] # 비동기 표현식은 파이썬 3.6 이상부터 사용 가능
async와 await를 사용하면 리스트, 딕셔너리, 세트, 제너레이터 표현식을 비동기 표현식으로 만들 수 있습니다

> 리스트: [변수 async for 변수 in 비동기이터레이터()]

> 딕셔너리: {키: 값 async for 키, 값 in 비동기이터레이터()}

> 세트: {변수 async for 변수 in 비동기이터레이터()}

> 제너레이터: (변수 async for 변수 in 비동기이터레이터())

표현식 안에서 await로 코루틴을 실행할 수도 있습니다. 딕셔너리, 세트, 제너레이터 표현식 안에서도 await를 사용할 수 있습니다.
> [await 코루틴함수() for 코루틴함수 in 코루틴함수리스트]

==================================================
async def main():
    a = [i async for i in AsyncCounter(3)]
    print(a)    # [0, 1, 2]

==================================================
async def async_one():
    return 1
 
async def main():
    coroutines = [async_one, async_one, async_one]
    a = [await co() for co in coroutines]
    print(a)    # [1, 1, 1]