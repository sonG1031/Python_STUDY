Date. 2023/01/24



[덕 타이핑이란 무엇인가요?]
덕 타이핑은 실제 타입(클래스)은 상관하지 않고, 구현된 메서드로만 판단하는 방식이다.
덕 타이핑은 "만약 어떤 새가 오리처럼 걷고, 헤엄치고, 꽥꽥거리는 소리를 낸다면 나는 그 새를 오리라 부르겠다."라는 덕 테스트(오리 테스트)에서 유래한 말입니다.

[믹스인이란 무엇인가요?]
믹스인(mix-in)은 다른 클래스에서 사용할 수 있도록 공통적인 메서드를 모아 놓은 클래스를 말합니다.
파이썬에서 믹스인은 자체 인스턴스 속성을 가지고 있지 않으며 __init__ 메서드를 구현하지 않습니다. 
믹스인의 실제 사용 예는 파이썬 내장 모듈 socketserver를 참조



예외(exception) : 코드를 실행하는 중에 발생한 에러
예외 처리 : 예외가 발생했을 때도 스크립트 실행을 중단하지 않고 계속 실행하게 해주는 방법

try:
    실행할 코드
except:
    예외가 발생했을 때 처리하는 코드

예외가 발생하면 해당 줄에서 코드 실행을 중단하고 바로 except로 가서 코드를 실행한다.
try의 코드가 에러 없이 잘 실행 되면 except의 코드는 실행되지 않고 그냥 넘어갑니다.
즉, try의 코드에서 에러가 발생했을 때만 except의 코드가 실행됩니다.


[특정 예외만 처리]
except에 예외 이름을 지정해서 특정 예외가 발생했을 때만 처리할 수 있다.

try:
    실행할 코드
except 예외이름:
    예외가 발생했을 때 처리하는 코드


[예외의 에러 메시지 받아오기]
except에서 as 뒤에 변수를 지정하면 발생한 예외의 에러 메시지를 받아올 수 있습니다.

try:
    실행할 코드
except 예외 as 변수:
    예외가 발생했을 때 처리하는 코드

단, 예외가 여러 개 발생하더라도 먼저 발생한 예외의 처리 코드만 실행됩니다.

모든 예외의 에러 메시지를 출력하고 싶다면
except Exception as e 같은 형식으로 지정하면 됨.


[참고 | 예외 계층]
https://docs.python.org/3/library/exceptions.html#exception-hierarchy
예외도 클래스 상속으로 구현됨.
보통 파이썬에서 새로운 예외를 만들 때는 Exception을 상속받아서 구현합니다.


[예외처리 else]
예외가 발생하지 않았을 때 코드를 실행
else는 except 바로 다음에 와야 하며 except를 생략할 수 없습니다.

try:
    실행할 코드
except:
    예외가 발생했을 때 처리하는 코드
else:
    예외가 발생하지 않았을 때 실행할 코드


[예외와는 상관없이 항상 코드 실행]
finally는 예외 발생 여부와 상관없이 항상 코드를 실행한다.
특히 finally는 except와 else를 생략할 수 있습니다.


[참고 | try 안에서 만든 변수는 try 바깥에서 사용할 수 있나요?]
try는 함수가 아니므로 스택 프레임을 만들지 않습니다.
따라서 try 안에서 변수를 만들더라도 try 바깥에서 사용할 수 있습니다.


[예외 발생시키기]
예외를 발생시킬 때는 raise에 예외를 지정하고 에러 메시지를 넣습니다.
raise로 예외를 발생시키면 raise 아래에 있는 코드는 실행되지 않고 바로 except로 넘어갑니다.
• raise 예외('에러메시지')

[raise의 처리 과정]
예외가 발생하더라도 현재 코드 블록에서 처리해줄 except가 없다면 except가 나올 때까지 계속 상위 코드 블록으로 올라갑니다.
만약 함수 바깥에도 처리해줄 except가 없다면 코드 실행은 중지되고 에러가 표시됩니다.


[현재 예외를 다시 발생시키기]
try except에서 처리한 예외를 다시 발생시킬려면 except 안에서 raise를 사용한다.
except 안에서 raise를 사용하면 현재 예외를 다시 발생시킵니다(re-raise).
• raise
raise만 사용하면 같은 예외를 상위 코드 블록으로 넘기지만 raise에 다른 예외를 지정하고 에러 메시지를 넣을 수도 있습니다.
• raise 예외('에러메시지')



[참고 | assert로 예외 발생시키기]
assert는 지정된 조건식이 거짓일 때 AssertionError 예외를 발생시키며 조건식이 참이면 그냥 넘어갑니다.
보통 assert는 나와서는 안 되는 조건을 검사할 때 사용합니다.
• assert 조건식
• assert 조건식, 에러메시지

assert는 디버깅 모드에서만 실행됩니다. 특히 파이썬은 기본적으로 디버깅 모드이며(__debug__의 값이 True)
assert가 실행되지 않게 하려면 python에 -O 옵션을 붙여서 실행합니다(영문 대문자 O).
• python -O 스크립트파일.py



[예외]
- 내장된 예외
- 사용자 정의 예외 : 프로그래머가 직접 만든 예외


[사용자 정의 예외 만드는법]
Exception을 상속받아서 새로운 클래스를 만들면 됩니다.
그리고 __init__ 메서드에서 기반 클래스의 __init__ 메서드를 호출하면서 에러 메시지를 넣어주면 됩니다.

class 예외이름(Exception):
    def __init__(self):
        super().__init__('에러메시지')

Exception만 상속받고 pass를 넣어서 아무것도 구현하지 않아도 됩니다.
그러나 이때는 예외를 발생시킬 때 에러 메시지를 넣어주면 됩니다.