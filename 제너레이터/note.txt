Date. 2023/01/28


제너레이터 : 이터레이터를 생성해주는 함수

이터레이터는 클래스에 __iter__, __next__ 또는 __getitem__ 메서드를 구현해야 하지만 
제너레이터는 함수 안에서 yield라는 키워드만 사용하면 끝


[제너레이터와 yield]
함수 안에서 yield를 사용하면 함수는 제너레이터가 됨.
yield에는 값(변수)을 지정함.
• yield 값


[제너레이터 객체가 이터레이터인지 확인하기]
제너레이터 함수를 호출하면 제너레이터 객체(generator object)가 반환됨.
이 객체를 dir 함수로 살펴보면 이터레이터에서 볼 수 있는 __iter__, __next__ 메서드가 들어있음.
즉, 이터레이터와 동작이 똑같다!
단, 이터레이터는 __next__ 메서드 안에서 직접 return으로 값을 반환했지만 
제너레이터는 yield에 지정한 값이 __next__ 메서드(next 함수)의 반환값으로 나온다.
또한, 이터레이터는 raise로 StopIteration 예외를 직접 발생시켰지만
제너레이터는 함수의 끝까지 도달하면 StopIteration 예외가 자동으로 발생한다.

제너레이터는 제너레이터 객체에서 __next__ 메서드를 호출할 때마다 
함수 안의 yield까지 코드를 실행하며 yield에서 값을 발생시킵니다(generate).


[for와 제너레이터]
▶︎ for i in generator():
1. generator()에서 __iter__로 제너레이터 객체(이터레이터)를 얻음.
2. 한 번 반복할 때마다 제너레이터 객체(이터레이터)에서 __next__로 숫자를 꺼내서 i에 저장
3. StopIteration이 발생하면 반복을 끝냄.
참고로 제너레이터 객체에서 __iter__를 호출하면 self를 반환하므로 같은 객체가 나옵니다
(제너레이터 함수 호출 > 제너레이터 객체 > __iter__는 self 반환 > 제너레이터 객체).


왜 yield라고 이름을 지었을까요?
yield는 생산하다라는 뜻과 함께 양보하다라는 뜻
즉, yield를 사용하면 값을 함수 바깥으로 전달하면서 코드 실행을 함수 바깥에 양보한다.
따라서 yield는 현재 함수를 잠시 중단하고 함수 바깥의 코드가 실행되도록 만든다!

[yield의 동작 과정]
yield를 사용하여 바깥으로 전달한 값은 next 함수(__next__ 메서드)의 반환값으로 나옴.
즉, 제너레이터 함수가 실행되는 중간에 next로 값을 가져온다.
그렇다면 제너레이터 함수는?
next 함수가 호출되면 제너레이터 함수는 yield를 사용후 대기 상태가 되어 다음 next 함수가 호출될때까지 멈춰있다. 

이렇게 제너레이터는 함수를 끝내지 않은 상태에서 yield를 사용하여 값을 바깥으로 전달할 수 있다.
즉, return은 반환 즉시 함수가 끝나지만 
yield는 잠시 함수 바깥의 코드가 실행되도록 양보하여 값을 가져가게 한 뒤 다시 제너레이터 안의 코드를 계속 실행하는 방식


[참고 | 제너레이터와 return]
제너레이터는 함수 끝까지 도달하면 StopIteration 예외가 발생
마찬가지로 return도 함수를 끝내므로 return을 사용해서 함수 중간에 빠져나오면 StopIteration 예외가 발생
특히 제너레이터 안에서 return에 반환값을 지정하면 반환값이 StopIteration 예외의 에러 메시지로 들어감.


[yield에서 함수 호출]
yield에서 함수(메서드)를 호출하면 해당 함수의 반환값을 바깥으로 전달
즉, yield에 무엇을 지정하든 결과만 바깥으로 전달합니다(함수의 반환값, 식의 결과).

이처럼 yield의 동작 방식만 이해하면 이터레이터보다 훨씬 간단하게 만들 수 있습니다.


[yield from]
yield로 값을 여러 번 바깥으로 전달할 때는 for 또는 while 반복문으로 반복하면서 yield를 사용함.
그러나 이런 경우 매번 반복문을 사용하지 않고, yield from을 사용하면 된다.
yield from에는 반복 가능한 객체, 이터레이터, 제너레이터 객체를 지정합니다(yield from은 파이썬 3.3 이상부터 사용 가능).
• yield from 반복가능한객체
• yield from 이터레이터
• yield from 제너레이터객체


[참고 | 제너레이터 표현식]
리스트 표현식을 사용할 때 [ ](대괄호)를 사용하듯이
같은 리스트 표현식을 ( )(괄호)로 묶으면 제너레이터 표현식이 된다!
리스트 표현식은 처음부터 리스트의 요소를 만들어내지만 
제너레이터 표현식은 필요할 때 요소를 만들어내므로 메모리를 절약할 수 있어!!
• (식 for 변수 in 반복가능한객체)

그럼 제너레이터를 왜 쓸까?
대용량 데이터를 메모리에 한꺼번에 읽어서 처리하기가 힘들기 때문에 
대용량 데이터를 부분부분 처리해야 할 때 이렇게 제너레이터를 활용함.