Date : 2022/08/04 

딕셔너리에 키와 값을 저장할 때 키가 중복되면 가장 뒤에 있는 값만 사용, 따라서 중복되는 키는 저장되지 않음.
>>> x = {'a' : 1, 'a' : 2}
>>> x['a']
2

딕셔너리의 키는 문자열뿐만 아니라 정수, 실수, 불도 사용할 수 있으며 자료형을 섞어서 사용해도 됨. (불변하는 자료형만 가능)
>>> x = {100:'hunni', False : 0}
>>> x[100] # key로 접근
'hunni'
>>> x[False]
0

[dict로 딕셔너리 만들기]
- 딕셔너리 = dict(키1=값1, 키2=값2) # 키에 ' '(작은따옴표)나 " "(큰따옴표) 사용X. 
>>> x = dict(a='A', b='B', c='C') # 키는 딕셔너리를 만들고 나면 문자열로 바뀜.
>>> x
{'a': 'A', 'b': 'B', 'c': 'C'}

- 딕셔너리 = dict(zip([키1, 키2], [값1, 값2]))
>>> x = dict(zip(['one', 'two', 'three'], [1,2,3])) # dict(zip object)
>>> x
{'one': 1, 'two': 2, 'three': 3}

- 딕셔너리 = dict([(키1, 값1), (키2, 값2)])
>>> x = dict([('a', 'ㄱ'), ('b', 'ㄴ')])
>>> x
{'a': 'ㄱ', 'b': 'ㄴ'}

- 딕셔너리 = dict({키1: 값1, 키2: 값2}) # 솔직히 신기해서 넣음.

딕셔너리의 키에 접근할 때는 딕셔너리 뒤에 [ ](대괄호)를 사용하며 [ ] 안에 키를 지정.
[딕셔너리의 키에 값 할당]
- 딕셔너리[키] = 값
▶︎ 딕셔너리는 없는 키에 값을 할당하면 해당 키가 추가되고 값이 할당됨.
▶︎ 없는 키에서 값을 가져오려고 하면 에러가 발생.

[딕셔너리에 키가 있는지 확인]
- 키 in 딕셔너리
▶︎ 키 not in 딕셔너리 # 키가 없는지 확인
>>> x = {'a' : 'A', 'b' : 'B', 'c' : 'C'}
>>> 'a' in x
True
>>> 'a' not in x
False

* 참고) 딕셔너리는 해시(Hash) 기법을 이용해서 데이터를 저장함.
보통 딕셔너리와 같은 키-값 형태의 자료형을 해시, 해시 맵, 해시테이블 등으로 부르기도 함.

in, not in : 포함(Containment) 연산자

len(dictionary) : 키의 개수