Date : 2022/11/25

[문자열 바꾸기]
- replace('바꿀문자열', '새문자열')
문자열 자체는 변경하지 않으며 바뀐 결과를 반환 (문자열은 튜플과 마찬가지로 불변.)

[문자 바꾸기]
- str.maketrans('바꿀문자', '새문자')
- translate(테이블)
>>> table = str.maketrans('aeiou', '12345')
>>> 'apple'.translate(table)
'1ppl2'

* translate는 문자들을 여러개 바꿀때 유용함. 문자 한개만 바꾸는 것은 replace로 가능.

[문자열 분리]
- split() (default: 공백을 기준)
- split('기준문자열')

[문자열 리스트 연결]
- '구분자'.join(리스트)

[대문자로]
- upper()
[소문자로]
- lower()

[왼쪽 공백 삭제]
- lstrip()
[왼쪽의 특정 문자 삭제]
- lstrip('삭제할문자들')
* 삭제할 문자들을 문자열 형태로 넣어주면 문자열 왼쪽에 있는 해당 문자를 삭제합니다.

[오른쪽 공백 삭제]
- rstrip()
[오른쪽의 특정 문자 삭제]
- rstrip('삭제할문자들')

[양쪽 공백 삭제]
- strip()
[양쪽의 특정 문자 삭제]
- strip('삭제할문자들')

참고 | 구두점을 간단하게 삭제하기?
string 모듈의 punctuation에는 모든 구두점이 들어있습니다. strip 메서드의 인자로 string.punctuation을 넣으면 간단하게 삭제 가능.


[문자열을 왼쪽 정렬, 오른쪽 정렬, 가운데 정렬]
문자열에 공백을 넣어 원하는 위치에 정렬하는 방법
- ljust(길이)
- rjust(길이)
- center(길이)

이렇게 문자열 메서드는 처리한 결과를 반환하도록 만들어져 있습니다.
따라서 메서드를 계속 연결해서 호출하는 메서드 체이닝이 가능합니다.
* 메서드 체이닝(method chaining) : 메서드를 줄줄이 연결한다고 해서~~

[문자열 왼쪽에 0 채우기]
- zfill(길이)
>>> '35'.zfill(4)
'0035'

[문자열 위치 찾기]
문자열에서 특정 문자열을 찾아서 인덱스를 반환, 문자열이 없으면 -1을 반환, 같은 문자열이 여러 개일 경우 처음 찾은 문자열의 인덱스를 반환
-find('찾을문자열')
-rfind('찾을문자열') # 오른쪽에서부터 문자열 위치 찾기

[문자열 위치 찾기]
왼쪽에서부터 특정 문자열을 찾아서 인덱스를 반환, 문자열이 없으면 에러를 발생, 같은 문자열이 여러 개일 경우 처음 찾은 문자열의 인덱스를 반환
- index('찾을문자열')
- rindex('찾을문자열') # 오른쪽에서부터 문자열 위치 찾기

[문자열 개수 세기]
현재 문자열에서 특정 문자열이 몇 번 나오는지 알아냅니다.
- count('문자열')


[서식 지정자]
    
    서식 지정자는 %로 시작하고 자료형을 뜻하는 문자가 붙습니다.(C에서 사용하는 문법과 비슷함.)
    - '%s' % '문자열'
    - '%d' % 숫자
    - '%f' % 숫자 # 기본적으로 소수점 이하 6자리까지 표시
        - '%.자릿수f' % 숫자 # 자릿수로 지정한 것 까지만 표시

    [서식 지정자로 문자열 정렬]
    문자열을 지정된 길이로 만든 뒤 오른쪽으로 정렬하고 남는 공간을 공백으로 채웁니다.
    * 왼쪽 정렬은 어떻게 할까요? 왼쪽 정렬은 문자열 길이에 -를 붙여주면 됩니다.
    - %길이s
    - %길이d
    - %길이.자릿수f

    [서식 지정자로 문자열 안에 값 여러 개 넣기]
    - '%d %s' % (숫자, '문자열')

[문자열 포매팅(string formatting)]
    { }(중괄호) 안에 포매팅을 지정하고 format 메서드로 값을 넣습니다.
    
    - '{인덱스}'.format(값)
    * 같은 인덱스가 지정된 { }를 여러 개 넣으면 같은 값이 여러 개 들어갑니다.
        >>> '{0} {0} {1} {1}'.format('Python', 'Script')
        'Python Python Script Script'
    * { }에서 인덱스를 생략하면 format에 지정한 순서대로 값이 들어갑니다.
        >>> 'Hello, {} {} {}'.format('Python', 'Script', 3.6)
        'Hello, Python Script 3.6'
    *  { }에 인덱스 대신 이름을 지정할 수도 있습니다.
        >>> 'Hello, {language} {version}'.format(language='Python', version=3.6)
        'Hello, Python 3.6'
    
    [문자열 포매팅으로 정렬]
    - '{인덱스:<길이}'.format(값) # 왼쪽 정렬
        >>> '{0:<10}'.format('python')
        'python    '
    - '{인덱스:>길이}'.format(값) # 오른쪽 정렬
        >>> '{0:>10}'.format('python')
        '    python'


파이썬 3.6부터는 문자열을 만드는 더 간단한 방법을 제공!
- f'{변수이름}'

[숫자 개수 맞추기]
    - '%0개수d' % 숫자
    - '{인덱스:0개수d'}'.format(숫자)
    - '%0개수.자릿수f' % 숫자
    - '{인덱스:0개수.자릿수f'}.format(숫자)

[채우기와 정렬을 조합해서 사용]
- '{인덱스:[[채우기]정렬][길이][.자릿수][자료형]}'

참고 | 금액에서 천단위로 콤마 넣기?
- format(숫자, ',')
    >>> format(1493500, ',')
    '1,493,500'

*** format 함수는 서식 지정자와 함께 사용할 수 있습니다.
>>> '%20s' % format(1493500, ',') # == '{0:>20,}'.format(1493500) # 길이 20, 오른쪽으로 정렬
'           1,493,500'