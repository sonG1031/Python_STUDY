Date : 2022/11/30

<집합(set)>
    
    - 집합 = {값1, 값2, 값3}
    - set(반복가능한객체)
    세트는 요소의 순서가 정해져 있지 않습니다(unordered).
    또한, 요소는 중복될 수 없습니다.

    * 빈 세트는 c = set() (c = {}, 이렇게 하면 빈 딕셔너리가 만들어짐.)

    [세트에 특정 값이 있는지 확인]
    - 값 in 세트
    - 값 not in 세트 (특정 값이 없는지 확인)

    [프로즌 세트]
    내용을 변경할 수 없는 세트.
    - 프로즌세트 = frozenset(반복가능한객체)
    frozenset는 집합 연산과 메서드에서 요소를 추가하거나 삭제하는 연산, 메서드는 사용할 수 없습니다.
    왜 사용할까요? frozenset는 세트 안에 세트를 넣고 싶을 때 사용합니다. 
    frozenset는 frozenset를 중첩해서 넣을 수 있습니다. 단, frozenset만 넣을 수 있고, 일반 set는 넣을 수 없습니다.

    [집합 연산과 이에 대응하는 메서드]
    집합 연산은 파이썬의 산술 연산자와 논리 연산자를 활용.

    | 연산자는 합집합(union)을 구하며 OR 연산자 |를 사용함.
    set.union 메서드와 동작이 같음.
    - 세트1 | 세트2
    - set.union(세트1, 세트2)

    & 연산자는 교집합(intersection)을 구하며 AND 연산자 &를 사용함.
    set.intersection 메서드와 동작이 같음.
    - 세트1 & 세트2
    - set.intersection(세트1, 세트2)

    - 연산자는 차집합(difference)을 구하며 뺄셈 연산자 -를 사용.
    set.difference 메서드와 동작이 같음.
    - 세트1 - 세트2
    - set.difference(세트1, 세트2)

    ^ 연산자는 대칭차집합(symmetric difference)을 구하며 XOR 연산자 ^를 사용.
    set.symmetric_difference 메서드와 동작이 같음.
    대칭차집합은 XOR 연산자의 특성을 그대로 따르는데 XOR은 서로 다르면 참입니다. 
    ** 따라서 집합에서는 두 집합 중 겹치지 않는 요소만 포함합니다.
    - 세트1 ^ 세트2
    - set.symmetric_difference(세트1, 세트2)

    [집합 연산 후 할당]
    - 세트1 |= 세트2
    - 세트1.update(세트2)
    - 세트1 &= 세트2
    - 세트1.intersection_update(세트2)
    - 세트1 -= 세트2
    - 세트1.difference_update(세트2)
    - 세트1 ^= 세트2    
    - 세트1.symmetric_difference_update(세트2)

    [부분 집합과 상위집합 확인]
    부분집합, 진부분집합, 상위집합, 진상위집합과 같이 속하는 관계를 표현할 수도 있습니다.

    <=은 현재 세트가 다른 세트의 부분집합(subset)인지 확인하며 issubset 메서드와 같습니다.
    - 현재세트 <= 다른세트
    - 현재세트.issubset(다른세트)

    <은 현재 세트가 다른 세트의 진부분집합(proper subset)인지 확인
    - 현재세트 < 다른세트

    >=은 현재 세트가 다른 세트의 상위집합(superset)인지 확인하며 issuperset 메서드와 같습니다.
    - 현재세트 >= 다른세트
    - 현재세트.issuperset(다른세트)

    >은 현재 세트가 다른 세트의 진상위집합(proper superset)인지 확인하며 메서드는 없습니다.
    - 현재세트 > 다른세트

    [세트가 같은지 다른지 확인]
    세트1 == 세트2, 세트1 != 세트2

    [세트가 겹치지 않는지 확인]
    현재 세트가 다른 세트와 겹치지 않는지 확인함.
    현재세트.isdisjoint(다른세트)

    [세트에 요소 추가]
    - 세트.add(요소)

    [세트에서 특정 요소를 삭제]
    - 세트.remove(요소) # 요소가 없으면 에러
    - 세트.discard(요소) # 요소가 없으면 그냥 넘어감.

    [세트에서 임의의 요소 삭제]
    - 세트.pop() 
    세트에서 임의의 요소를 삭제하고 해당 요소를 반환, 요소가 없으면 에러.
    [세트의 모든 요소를 삭제]
    - 세트.clear()

    [세트의 요소 개수]
    - len(세트)

    [세트의 할당과 복사]
    완전히 두 개로 만들려면 copy 메서드로 모든 요소를 복사해야함.
    - 세트2 = 세트2.copy() # 별개의 세트가 됨.

    [반복문과 세트]
    # 반복문은 반복가능한객체면 다 반복되는듯.
    for 변수 in 세트:
        반복할 코드
    
    [세트 표현식]
    - {식 for 변수 in 반복가능한객체}
    - set(식 for 변수 in 반복가능한객체)
    - {식 for 변수 in 세트 if 조건식}
    - set(식 for 변수 in 세트 if 조건식)