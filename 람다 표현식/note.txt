Date. 2023/01/03


• 람다 표현식으로 익명 함수를 만드는 방법.
• 람다 표현식은 식 형태로 되어 있다고 해서 람다 표현식(lambda expression)이라 부름.
• 람다 표현식은 함수를 간편하게 작성할 수 있어서 다른 함수의 인수로 넣을 때 주로 사용.


[람다 표현식으로 함수 만들기]
lambda에 매개변수를 지정하고 :(콜론) 뒤에 반환값으로 사용할 식을 지정.
• lambda 매개변수들: 식


실행을 해보면 함수 객체가 나오는데, 이 상태로는 함수를 호출할 수 없습니다. 
왜냐하면 람다 표현식은 "이름이 없는 함수"를 만들기 때문입니다. 
그래서 람다 표현식을 익명 함수(anonymous function)로 부르기도 합니다.


[람다 표현식 호출 방법]
1. lambda로 만든 익명 함수를 호출하려면 람다 표현식을 변수에 할당해주면 됩니다.
2. 람다 표현식은 변수에 할당하지 않고 람다 표현식 자체를 바로 호출 방법
   • (lambda 매개변수들: 식)(인수들)


[주의할 점]
람다 표현식 안에서는 새 변수를 만들 수 없다!
따라서 반환값 부분은 변수 없이 식 한 줄로 표현할 수 있어야 합니다. 
변수가 필요한 코드일 경우에는 def로 함수를 작성하는 것이 좋습니다.
단, 람다 표현식 바깥에 있는 변수는 사용할 수가 있다!
>>> y = 10
>>> (lambda x: x + y)(1)
11


람다 표현식을 사용하는 이유는 함수의 인수 부분에서 간단하게 함수를 만들기 위해서 입니다.
대표적인 예가 map함수 입니다.
>>> list(map(lambda x: x + 10, [1, 2, 3]))
[11, 12, 13]


[람다 표현식으로 매개변수가 없는 함수 만들기]
람다 표현식으로 매개변수가 없는 함수를 만들 때는 lambda 뒤에 아무것도 지정하지 않고 :(콜론)을 붙입니다.
단, 콜론 뒤에는 반드시 반환할 값이 있어야 합니다. 왜냐하면 표현식(expression)은 반드시 값으로 평가되어야 하기 때문입니다.


[조건부 표현식]
식1은 조건식이 참일 때, 식2는 조건식이 거짓일 때 사용할 식.
특히 람다 표현식에서 if를 사용했다면 반드시 else를 사용해야함. (안그러면 에러)
그리고 elif를 사용할 수 없음. (if를 연속으로 사용하면 가능)
• 조건부 표현식은 식1 if 조건식 else 식2


[람다 표현식에 조건부 표현식 사용하기]
• lambda 매개변수들: 식1 if 조건식 else 식2


[map에 객체를 여러 개 넣기]
map은 리스트 등의 반복 가능한 객체를 여러 개 넣을 수도 있습니다.
단, map 함수에 들어갈 lambda 함수의 매개변수와 반복 가능한 객체의 수가 맞아야함.
>>> a = [1,2,3]
>>> b = [4,5,6]
>>> list(map(lambda x,y: x*y, a,b))
[4, 10, 18]


[filter 사용]
filter는 반복 가능한 객체에서 특정 조건에 맞는 요소만 가져오는데, 
filter에 지정한 함수의 반환값이 True일 때만 해당 요소를 가져옵니다.
• filter(함수, 반복가능한객체)

[reduce 사용]
반복 가능한 객체의 각 요소를 지정된 함수로 처리한 뒤 이전 결과와 누적해서 반환하는 함수입니다.
파이썬 3부터 내장 함수가 아니기 때문에, functools 모듈에서 import 해야함.
• from functools import reduce
• reduce(함수, 반복가능한객체)
Ex) reduce(lambda x, y: x + y, lst)
