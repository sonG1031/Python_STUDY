Date : 2022/11/23


<리스트 메서드>

    [리스트 요소 추가]
    - append: 요소 하나를 추가
    - extend: 리스트를 연결하여 확장
    - insert: 특정 인덱스에 요소 추가


    >>> a = [10, 20, 30]
    >>> a[1:1] = [500, 600]
    >>> a
    [10, 500, 600, 20, 30]
    a[1:1] = [500, 600]과 같이 시작 인덱스와 끝 인덱스를 같게 지정하면 해당 인덱스의 요소를 덮어쓰지 않으면서 요소 여러 개를 중간에 추가할 수 있습니다.


    [리스트 요소 삭제]
    - pop: 마지막 요소 또는 특정 인덱스의 요소를 삭제
    - remove: 특정 값을 찾아서 


    [리스트에서 특정 값의 인덱스 구하기]
    - index(값)
    [특정 값의 개수 구하기]
    - count(값)
    [리스트의 순서를 뒤집기]
    - reverse
    [리스트의 요소를 정렬]
    - sort
    * sort 메서드와 sorted 함수 차이점 : sort는 메서드를 사용한 리스트를 변경하지만, sorted 함수는 정렬된 새 리스트를 생성함.
    [리스트의 모든 요소를 삭제]
    - clear

<리스트의 할당과 복사>

    >>> a = [0, 0, 0, 0, 0]
    >>> b = a
    리스트를 다른 변수에 할당하면 리스트는 두 개가 될 것 같지만 실제로 리스트는 한개임.

    >>> a is b
    True
    변수 이름만 다를 뿐 리스트 a와 b는 같은 객체임.

    완전히 두 개로 만들려면..
    b = a.copy()와 같이 copy 메서드를 사용.

    [인덱스와 요소를 함께]
    - for 인덱스, 요소 in enumerate(리스트):
    [for 반복문에서 인덱스만]
    -  for i in range(len(a)):
    ** for ~ in ~: 는 시퀀스 객체를 반복할 수 있다. 
    
    [요소의 최대, 최소]
    - 최소: min(시퀀스 객체)
    - 최대: max(시퀀스 객체)
    [요소의 합]
    - sum(시퀀스 객체)
    ** min, max, sum에는 리스트뿐만 아니라 모든 반복 가능한 객체(iterable)를 넣을 수 있습니다.


<list comprehension(a.k.a 리스트 표현식)>

    리스트 안에 식, for 반복문, if 조건문 등을 지정하여 리스트를 생성하는 것을 리스트 컴프리헨션(list comprehension)이라함.
    컴프리헨션은 어떤 것을 잡아서 담아둔다는 뜻.

    [리스트 표현식]
    - [식 for 변수 in 리스트]
    - list(식 for 변수 in 리스트)
    >>> [i for i in range(10)]
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    >>> [i*2 for i in range(10)] 
    [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]

    [리스트 표현식에서 if 조건문]
    - [식 for 변수 in 리스트 if 조건식]
    - list(식 for 변수 in 리스트 if 조건식)

    [for 반복문과 if 조건문을 여러 번 사용]
    - [식 for 변수1 in 리스트1 if 조건식1  for 변수2 in 리스트2 if 조건식2]
    >>> [i * j for j in range(2, 10) for i in range(1, 10)]
    [2, 4, 6, 8, 10, 12, 14, 16, 18, 3, 6, 9, 12, 15 ... ]
    