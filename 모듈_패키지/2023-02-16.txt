Date. 2023/02/16


매번 비슷한 클래스와 함수를 작성한다면 코드도 길어지고 중복되는 부분이 생깁니다. 
이런 경우에는 공통되는 부분을 빼내서 모듈과 패키지로 만들면 됩니다. 

모듈(module): 변수, 함수, 클래스 등을 모아 놓은 스크립트 파일
패키지(package): 여러 모듈을 묶은 것

모듈은 간단한 기능을 담을 때 사용하며, 패키지는 코드가 많고 복잡할 때 사용합니다.
즉, 패키지는 기능들이 모듈 여러 개로 잘게 나누어져 있고, 관련된 모듈끼리 "폴더"에 모여 있는 형태입니다.


[모듈 만들기]
변수, 함수, 클래스 등을 저장한 python 파일을 만들면 그게 모듈입니다ㅋ
square2.py 라는 모듈을 만들었다면 square2가 모듈 이름이 됩니다.
즉, 스크립트 파일에서 확장자 .py를 제외하면 모듈 이름이 됩니다.

[모듈 사용하기]
만든 모듈의 모듈이름을 import, from import 등으로 가져오면 끝!

[모듈에 클래스 작성하기]
모듈의 클래스를 사용하는 방법도 변수, 함수와 같습니다.
즉, 모듈.클래스() 형식으로 모듈의 클래스를 사용하면 인스턴스를 만들 수 있습니다.


[모듈과 시작점]
인터넷에 있는 파이썬 코드를 보다 보면 if __name__ == '__main__':으로 시작하는 부분을 자주 만나게 됩니다.
이 코드는 왜 사용하는 것일까요? 이 코드는 현재 스크립트 파일이 실행되는 상태를 파악하기 위해 사용합니다. 
파이썬에서 import로 모듈을 가져오면 해당 스크립트 파일이 한 번 실행됩니다. 따라서 hello 모듈을 가져오면 hello.py 안의 코드가 실행됩니다.
따라서 hello.py의 __name__ 변수에는 'hello'가 들어가고, main.py의 __name__ 변수에는 '__main__'이 들어갑니다.

• __name__: 모듈의 이름이 저장되는 변수

자세히 설명하면 import로 모듈을 가져왔을 때 모듈의 이름이 들어갑니다. 
하지만 파이썬 인터프리터로 스크립트 파일을 "직접 실행"했을 때는 모듈의 이름이 아니라 '__main__'이 들어갑니다.
따라서 hello.py 파일을 직접 실행하면 __name__ 변수안에 '__main__'이 들어갑니다.
즉, 어떤 스크립트 파일이든 파이썬 인터프리터가 "최초로 실행한 스크립트 파일"의 __name__에는 '__main__'이 들어갑니다. 
이는 프로그램의 시작점(entry point)이라는 뜻입니다.

파이썬은 최초로 시작하는 스크립트 파일과 모듈의 차이가 없습니다. 
어떤 스크립트 파일이든 시작점도 될 수 있고, 모듈도 될 수 있습니다. 
그래서 __name__ 변수를 통해 현재 스크립트 파일이 시작점인지 모듈인지 판단합니다.

결론은 if __name__ == '__main__': 코드는 현재 스크립트 파일이 프로그램의 시작점이 맞는지 판단하는 작업!
즉, 스크립트 파일이 메인 프로그램으로 사용될 때와 모듈로 사용될 때를 구분하기 위한 용도입니다.


[참고 | 파이썬은 왜 프로그램의 시작점이 정해져 있지 않나요?]
파이썬이 처음에 개발 될 당시에는 리눅스/유닉스에서 사용하는 스크립트 언어 기반이었기 때문에 프로그램의 시작점이 따로 정해져 있지 않았습니다. 
보통 리눅스/유닉스의 스크립트 파일은 파일 한 개로 이루어진 경우가 많은데, 이 스크립트 파일 자체가 하나의 프로그램이다 보니 시작점이 따로 필요하지 않습니다. 
하지만 C 언어나 자바같은 언어는 처음 만들어질 때부터 소스 파일을 여러 개 사용했기 때문에 여러 소스 파일의 함수들 중에서도 시작 함수(main)를 따로 정해 놓았습니다.



[패키지 만들기]
모듈은 스크립트 파일이 한 개지만 패키지는 폴더(디렉터리)로 구성되어 있습니다.
폴더(디렉터리) 안에 __init__.py 파일이 있으면 해당 폴더는 패키지로 인식됩니다.
그리고 기본적으로 __init__.py 파일의 내용은 비워 둘 수 있습니다.
(파이썬 3.3 이상부터는 __init__.py 파일이 없어도 패키지로 인식됩니다. 하지만 하위 버전에도 호환되도록 __init__.py 파일을 작성하는 것을 권장합니다.)

[패키지에 모듈 만들기]
폴더 안에 .py 파일을 만들면 됩니다.

[패키지 사용] 사용법은 다를게 없음ㅋㅋ
import 패키지.모듈
패키지.모듈.변수
패키지.모듈.함수()
패키지.모듈.클래스()
from 패키지.모듈 import 변수
from 패키지.모듈 import 함수
from 패키지.모듈 import 클래스


[참고 | 패키지의 모듈과 __name__]
패키지의 모듈에서는 __name__ 변수에 패키지.모듈 형식으로 이름이 들어갑니다. 

[참고 | 모듈과 패키지를 찾는 경로]
지금까지 모듈과 패키지는 현재 폴더(디렉터리)에 만들었습니다. 
파이썬에서는 현재 폴더에 모듈, 패키지가 없으면 다음 경로에서 모듈, 패키지를 찾습니다.
sys 모듈의 path 변수에는 모듈, 패키지를 찾는 경로가 들어있습니다. 
여기서 site-packages 폴더에는 pip로 설치한 패키지가 들어갑니다.
만약 가상 환경(virtual environment)를 만들어서 모듈과 패키지를 관리한다면 가상환경/Lib/site-packages 폴더에 모듈과 패키지가 들어갑니다.
그리고 자기가 만든 모듈, 패키지도 site-packages 폴더에 넣으면 스크립트 파일이 어디에 있든 모듈, 패키지를 사용할 수 있습니다.



import 패키지 형식으로 패키지만 가져와서 모듈을 사용할 수는 없을까요?
패키지의 __init__.py 파일을 다음과 같이 수정합니다.
• from . import 모듈

파이썬에서 __init__.py 파일은 폴더(디렉터리)가 패키지로 인식되도록 하는 역할도 하고, 이름 그대로 패키지를 "초기화하는 역할"도 합니다.
즉, import로 패키지를 가져오면 __init__.py 파일이 실행되므로 이 파일에서 from . import 모듈 형식으로 
▶︎▶︎ 현재 패키지에서 모듈을 가져오게 만들어야 합니다.
참고로 .(점)은 현재 패키지라는 뜻이다.


[패키지에 from import *]
• from 패키지 import *
위의 코드를 실행하고 패키지를 사용했을때 __init__파일을 따로 설정한게 아니라면 오류가 난다.
왜냐하면 __init__.py에서 모듈만 가져왔을 뿐 모듈 안의 함수는 가져오지 않았기 때문!
이때는 __init__.py에서 모듈 안의 함수를 가져오게 만들어야 합니다.
• from .모듈 import *

이렇게 패키지의 __init__.py에서 from .모듈 import * 형식으로 작성했다면 
패키지를 가져오는 스크립트에서는 패키지.함수() 형식으로 사용할 수 있습니다.
왜냐하면 패키지의 네임스페이스에 모듈에서 만든 것들이 들어가기 때문이다. 따라서 모듈을 거칠 필요없이 바로 사용할 수 있는 것이다.

• import 패키지
>>> 패키지.변수
>>> 패키지.함수()
>>> 패키지.클래스()



[참고 | __all__로 필요한 것만 공개하기]
패키지의 __init__.py에서 from .모듈 import *로 모든 변수, 함수, 클래스를 가져오면 패키지 외부에 공개하고 싶지 않은 것까지 공개하게 됩니다.
이때는 __all__에 공개할 모듈, 변수, 함수, 클래스를 리스트 형태로 지정해주면 됩니다.
_all__이라는 이름 그대로 모든 것(*)을 가져갈 때의 목록을 정합니다.


[참고 | 하위 패키지 사용하기]
파이썬의 패키지는 패키지 안에 하위 패키지를 만들 수 있습니다. 
즉, 패키지 안에 폴더(디렉터리)를 만들고 __init__.py와 모듈을 넣으면 하위 패키지가 됩니다.
참고로 하위 패키지 안에서 옆에 있는 패키지의 요소를 가져와서 사용하려면 ..을 사용해야 합니다. 
..은 상위 폴더(디렉터리)라는 뜻이며 ..패키지 또는 ..모듈은 상위 폴더에 있는 패키지, 모듈이라는 뜻입니다.
즉, 현재 패키지와 같은 계층의 패키지 또는 모듈입니다.
그리고 ...은 상위 폴더의 상위 폴더라는 뜻이며 위로 갈 수록 .이 하나씩 늘어납니다.


[참고 | 모듈과 패키지의 독스트링]
• 모듈의 독스트링 : 모듈 파일의 첫 줄에 """ """(큰따옴표 세 개) 또는 ''' '''(작은따옴표 세 개)를 사용하여 문자열을 넣습니다.
• 패키지의 독스트링 : __init__.py 파일의 첫 줄에 """ """(큰따옴표 세 개) 또는 ''' '''(작은따옴표 세 개)를 사용하여 문자열을 넣습니다.
모듈과 패키지의 독스트링을 출력하려면 모듈 또는 패키지의 __doc__를 출력하면 됩니다.