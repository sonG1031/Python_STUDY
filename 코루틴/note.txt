Date. 2023/02/01


메인 루틴에서 서브 루틴을 호출하면 서브 루틴의 코드를 실행한 뒤 다시 메인 루틴으로 돌아옵니다. 
특히 서브 루틴이 끝나면 서브 루틴의 내용은 모두 사라집니다. 즉, 서브 루틴은 메인 루틴에 종속된 관계입니다.

하지만 코루틴은 방식이 조금 다릅니다. 
코루틴(coroutine)은 cooperative routine를 의미하는데 서로 협력하는 루틴이라는 뜻입니다. 
즉, 메인 루틴과 서브 루틴처럼 종속된 관계가 아니라 서로 대등한 관계이며 특정 시점에 상대방의 코드를 실행합니다.

코루틴은 함수가 종료되지 않은 상태에서 메인 루틴의 코드를 실행한 뒤 다시 돌아와서 코루틴의 코드를 실행합니다.
따라서 코루틴이 종료되지 않았으므로 코루틴의 내용도 계속 유지됩니다.

일반 함수를 호출하면 코드를 한 번만 실행할 수 있지만, 코루틴은 코드를 여러 번 실행할 수 있습니다. 
참고로 함수의 코드를 실행하는 지점을 진입점(entry point)이라고 하는데, 코루틴은 진입점이 여러 개인 함수입니다.


코루틴은 제너레이터의 특별한 형태!
제너레이터는 yield로 값을 발생시켰지만 코루틴은 yield로 값을 받아올 수 있습니다.
메인루틴에서 코루틴에 값을 보내면서 코드를 실행할 때는 send 메서드를 사용합니다.
그리고 send 메서드가 보낸 값을 받아오려면 (yield) 형식으로 yield를 괄호로 묶어준 뒤 변수에 저장합니다.

• 코루틴객체.send(값)
• 변수 = (yield)

코루틴을 사용할때 next()함수로 코루틴 안의 코드를 최초로 실행하여 yield까지 코드를 실행시킴.
• next(코루틴객체)


[참고 | send로 코루틴의 코드를 최초로 실행하기]
코루틴객체.send(None)과 같이 send 메서드에 None을 지정해도 코루틴의 코드를 최초로 실행할 수 있습니다.


[코루틴 바깥으로 값 전달]
(yield 변수) 형식으로 yield에 변수를 지정한 뒤 괄호로 묶어주면 값을 받아오면서 바깥으로 값을 전달합니다.
그리고 yield를 사용하여 바깥으로 전달한 값은 next 함수(__next__ 메서드)와 send 메서드의 반환값으로 나옵니다.
• 변수 = (yield 변수)
• 변수 = next(코루틴객체)
• 변수 = 코루틴객체.send(값)

next와 send의 차이를 살펴보면 next는 코루틴의 코드를 실행하지만 값을 보내지 않을 때 사용하고, send는 값을 보내면서 코루틴의 코드를 실행할 때 사용


[제너레이터와 코루틴의 차이점]
• 제너레이터는 next 함수(__next__ 메서드)를 반복 호출하여 값을 얻어내는 방식
• 코루틴은 next 함수(__next__ 메서드)를 한 번만 호출한 뒤 send로 값을 주고 받는 방식


[참고 | 값을 보내지 않고 코루틴의 코드 실행하기]
값을 보내지 않으면서 코루틴의 코드를 실행할 때는 next 함수(__next__ 메서드)만 사용하면 됩니다. 잘 생각해보면 이 방식이 일반적인 제너레이터입니다.


[코루틴 강제 종료]
보통 코루틴은 실행 상태를 유지하기 위해 while True:를 사용해서 끝나지 않는 무한 루프로 동작합니다. 
만약 코루틴을 강제로 종료하고 싶다면 close 메서드를 사용합니다.

• 코루틴객체.close()

코루틴 객체에서 close 메서드를 사용하면 코루틴이 종료됩니다.
사실 파이썬 스크립트가 끝나면 코루틴도 끝나기 때문에 close를 사용하지 않은 것과 별 차이가 없습니다. 
하지만 close는 코루틴의 종료 시점을 알아야 할 때 사용하면 편리합니다.


[GeneratorExit 예외 처리]
코루틴 객체에서 close 메서드를 호출하면 코루틴이 종료될 때 GeneratorExit 예외가 발생합니다.
따라서 이 예외를 처리하면 코루틴의 종료 시점을 알 수 있습니다.
이렇게 하면 close 메서드로 코루틴을 종료할 때 원하는 코드를 실행할 수 있습니다.


[코루틴 안에서 예외 발생]
코루틴 안에 예외를 발생 시킬 때는 throw 메서드를 사용
throw는 말그대로 던지다라는 뜻인데 예외를 코루틴 안으로 던집니다. 
이때 throw 메서드에 지정한 에러 메시지는 except as의 변수에 들어갑니다.

• 코루틴객체.throw(예외이름, 에러메시지)


[코루틴에서 yield from]
yield from에 코루틴를 지정하면 해당 코루틴에서 return으로 반환한 값을 가져옵니다.
• 변수 = yield from 코루틴()

코루틴에서 yield from을 사용하면 코루틴 바깥에서 send로 하위 코루틴까지 값을 보낼 수 있습니다. 


[StopIteration 예외 발생]
코루틴도 제너레이터이므로 return을 사용하면 StopIteration이 발생
그래서 코루틴에서 return 값은 raise StopIteration(값)처럼 사용할 수도 있습니다(파이썬 3.6 이하)
단, 파이썬 3.7부터는 제너레이터 안에서 raise로 StopIteration 예외를 직접 발생시키면 RuntimeError로 바뀌므로 이 방법은 사용할 수 없습니다. 
파이썬 3.7부터는 그냥 return 값을 사용해야 합니다.
• raise StopIteration(값)


코루틴은 함수가 종료되지 않은 상태에서 값을 주고 받을 수 있는 함수이며 이 과정에서 현재 코드의 실행을 대기하고 상대방의 코드를 실행한다는 점이 중요합니다. 
보통 코루틴은 시간이 오래 걸리는 작업을 분할하여 처리할 때 사용하는데 주로 파일 처리, 네트워크 처리 등에 활용합니다.


[참고 | 코루틴의 yield from으로 값을 발생시키기] # coroutine_yield_yield_from.py
코루틴에서 yield에 값을 지정해서 바깥으로 전달했다면 yield from은 해당 값을 다시 바깥으로 전달